q()
install.packages("tidyverse")
install.packages('data.table')
install.packages("zoo")
install.packages("lmtest")
install.packages("sandwich")
install.packages("dygraphs")
install.packages("plotly")
install.packages("prettydoc")
install.packages("xaringan")
install.packages("markdown")
install.packages("knitr")
install.packages("rugarch")
install.packages("RPostgreSQL")
install.packages("vars")
install.packages("tensorflow")
install.packages("car')
install.packages("car")
install.packages("caret")
install.packages("forecast")
install.packages("rpart")
install.packages("rpart.plot")
library(data.table)
library(tidyverse)
library(forecast)
library(lubridate)
library(zoo)
library(cluster)
library(factoextra)
train_path <- 'training.csv'
test_path  <- 'test.csv'
fixed      <- 'fixed_routes.csv'
res <- loadData(train_path, test_path, fixed)
train   <- res[[1]]
test    <- res[[2]]
routes  <- res[[3]]
train <- gen_features(train)
test  <- gen_features_test(test)
# Function to load data files -----------------------------------------------------------
loadData <- function(train_path, test_path, routes_path){
input_path  <- 'C:/Users/Lkhagvaa/Documents/data nomads/'
train   <- fread(paste(input_path,train_path,sep=""))
test    <- fread(paste(input_path,test_path,sep=""))
fixed   <- fread(paste(input_path,routes_path,sep=""))
# Append the main dataframes with the routes
test  <- test   %>% left_join(fixed, by = c('BUSSTOP_ID','BUSROUTE_ID','BUSSTOP_SEQ'))
train <- train  %>% left_join(fixed, by = c('BUSSTOP_ID','BUSROUTE_ID','BUSSTOP_SEQ'))
return(list(train,test,fixed))
}
# Function to generate features in dataframes -----------------------------------------------------------
gen_features <- function(df){
df$ymd     <- format(as.Date(df$RECORD_DATE), "%Y-%m-%d")
df         <- df %>% arrange(BUS_ID) %>% group_by(BUS_ID,ymd) %>%
mutate(time_spent = TIMESTAMP-lag(TIMESTAMP))
df         <- df %>% arrange(BUS_ID) %>% group_by(BUS_ID,ymd) %>%
mutate(dist = sqrt((GPS_COORDX-lag(GPS_COORDX))^2+
(GPS_COORDY-lag(GPS_COORDY))^2))
return(df)
}
gen_features_test <- function(df){
df         <- df %>% arrange(BUS_ID) %>% group_by(BUS_ID) %>%
mutate(dist = sqrt((GPS_COORDX-lag(GPS_COORDX))^2+
(GPS_COORDY-lag(GPS_COORDY))^2))
return(df)
}
train_path <- 'training.csv'
test_path  <- 'test.csv'
fixed      <- 'fixed_routes.csv'
res <- loadData(train_path, test_path, fixed)
train   <- res[[1]]
test    <- res[[2]]
routes  <- res[[3]]
train <- gen_features(train)
test  <- gen_features_test(test)
# The very first step of data matching is just to make a linear interpolate of TIMESTAMP -----------------------------------------------------------
testD <- test
testD$TIMESTAMP <- na.approx(testD$TIMESTAMP,method = 'linear')
kmeans_zone = kmeans(train[,c('GPS_COORDX','GPS_COORDY')],
centers = 15,nstart = 2)
train$cluster = kmeans_zone$cluster
test$cluster = kmeans_zone$cluster
kmeans_zone1 = kmeans(train[,c('GPS_COORDX','GPS_COORDY')],
centers = 15,nstart = 2)
kmeans_zone2 = kmeans(test[,c('GPS_COORDX','GPS_COORDY')],
centers = 15,nstart = 2)
train$cluster = kmeans_zone1$cluster
train$cluster1 = kmeans_zone1$cluster
test$cluster2 = kmeans_zone2$cluster
View(res)
View(test)
meanDF = train %>% group_by(ROUTE_KEY) %>% summarise(mean(time_spent))
meanDF
meanDF = train %>% group_by(ROUTE_KEY) %>% summarise(mean(time_spent,na.rm=T))
meanDF
meanDF = train %>% group_by(ROUTE_KEY) %>% summarise(mean = mean(time_spent,na.rm=T))
meanDF
abs(time_spent)
train[time_spent]
train[time_spent>15*60]
View(train)
train['time_spent'>15*60]
train['time_spent'>15*60] = NA
train['time_spent'>15*60,'time_spent'] = NA
train <- gen_features(train)
train['time_spent'>15*60,'time_spent'] = NA
View(train)
train_path <- 'training.csv'
test_path  <- 'test.csv'
fixed      <- 'fixed_routes.csv'
res <- loadData(train_path, test_path, fixed)
train   <- res[[1]]
test    <- res[[2]]
routes  <- res[[3]]
train <- gen_features(train)
test  <- gen_features_test(test)
train[abs('time_spent')>15*60,'time_spent'] = NA
train[abs(time_spent)>15*60,'time_spent'] = NA
train[abs(train$time_spent)>15*60,'time_spent'] = NA
train$time_spent
abs(train$time_spent)
abs(train$time_spent)>15*60
train[abs(train$time_spent)>15*60,'time_spent'] = NA
train[abs(train$time_spent)>15*60,'time_spent']
train   <- res[[1]]
View(train)
train[abs(train$time_spent)>15*60,'time_spent']
train <- gen_features(train)
train[abs(train$time_spent)>15*60,'time_spent']
train[abs(train$time_spent)>15*60,'time_spent'] = NA
train
abs(train$time_spent)>15*60
train[abs(train$time_spent)>15*60,'time_spent']
testA = replace_na(testA$difference,0)
test = replace_na(testA$time_spent,0)
rm(list = ls())
library(quantmod)
library(dygraphs)
getSymbols()
getSymbols(Symbols = 'DELL',from='2019-03-20',auto.assign = F)
getSymbols(Symbols = 'DELL',from='2019-03-20',auto.assign = T)
= 'SNP',from='2019-03-20',auto.assign = T)
getSymbols(Symbols = 'MS',from='2019-03-20',auto.assign = T)
getSymbols(Symbols = 'FTSV',from='2019-03-20',auto.assign = T)
getSymbols(Symbols = 'NEU',from='2019-03-20',auto.assign = T)
getSymbols(Symbols = 'SNP',from='2019-03-20',auto.assign = T)
df = data.frame(DELL = DELL$DELL.Close,
SNP = SNP$SNP.Close,
MS = MS$MS.Close,
FTSV = FTSV$FTSV.Close,
NEU = NEU$NEU.Close)
head(df)
df = data.frame(t = 0:nrow(DELL),
DELL = DELL$DELL.Close,
SNP = SNP$SNP.Close,
MS = MS$MS.Close,
FTSV = FTSV$FTSV.Close,
NEU = NEU$NEU.Close)
df = data.frame(t = 0:nrow(DELL+1),
DELL = DELL$DELL.Close,
SNP = SNP$SNP.Close,
MS = MS$MS.Close,
FTSV = FTSV$FTSV.Close,
NEU = NEU$NEU.Close)
df = data.frame(t = 0:nrow(DELL)+1,
DELL = DELL$DELL.Close,
SNP = SNP$SNP.Close,
MS = MS$MS.Close,
FTSV = FTSV$FTSV.Close,
NEU = NEU$NEU.Close)
df = data.frame(t = 0:nrow(DELL)-1,
DELL = DELL$DELL.Close,
SNP = SNP$SNP.Close,
MS = MS$MS.Close,
FTSV = FTSV$FTSV.Close,
NEU = NEU$NEU.Close)
nrow(DELL)
df = data.frame(t = 0:(nrow(DELL)-1),
DELL = DELL$DELL.Close,
SNP = SNP$SNP.Close,
MS = MS$MS.Close,
FTSV = FTSV$FTSV.Close,
NEU = NEU$NEU.Close)
head(df)
colnames(df) = c('DELL','SNP','MS','FTSV','NEU')
head(df)
colnames(df) = c('t','DELL','SNP','MS','FTSV','NEU')
head(df)
write.csv('Portfolia.csv',df)
write.csv(df,'Portfolia.csv')
getSymbols(Symbols = 'TWTR',from='2019-03-20',auto.assign = T)
df = data.frame(t = 0:(nrow(DELL)-1),
DELL = DELL$DELL.Close,
SNP = SNP$SNP.Close,
MS = MS$MS.Close,
FTSV = FTSV$FTSV.Close,
NEU = NEU$NEU.Close,
TWTR = TWTR$TWTR.Close)
colnames(df) = c('t','DELL','SNP','MS','FTSV','NEU','TWTR')
head(df)
library(tidyverse)
write.xlsx(df,'Portfolia.xlsx')
write.table(df , 'Portfolia.xlsx')
library(data.table)
fwrite(df, 'Portfolia.xlsx')
setwd("~/GitHub/Youtube-channel/UFE/Markowitz")
library(readxl)
install.packages('xlsx')
write.csv(df, 'Portfolia.csv')
source('~/GitHub/Youtube-channel/UFE/Markowitz/Portfolia.R', echo=TRUE)
getSymbols(Symbols = 'NKE',from='2019-03-20',auto.assign = T)
df = data.frame(t = 0:(nrow(DELL)-1),
DELL = DELL$DELL.Close,
SNP = SNP$SNP.Close,
MS = MS$MS.Close,
FTSV = FTSV$FTSV.Close,
NUE = NUE$NUE.Close,
TWTR = TWTR$TWTR.Close,
NKE = NKE$NKE.Close)
colnames(df) = c('t','DELL','SNP','MS','FTSV','NUE','TWTR','NKE')
head(df)
write.csv(df, 'Portfolia.csv')
