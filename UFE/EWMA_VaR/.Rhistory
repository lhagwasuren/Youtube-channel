}
for(i in 1:n){
ifelse(rivers[i]>500,print(paste(rivers[i],'large river')),print(paste(rivers[i],'short river')))
}
ifelse(rivers<500,'short river','long river')
ifelse(rivers<=500,'short river','long river')
(long = rivers[rivers>500])
(short = rivers[rivers<=500])
for(i in 1:n){
ifelse(rivers[i]>500,print(paste(rivers[i],'large river')),print(paste(rivers[i],'short river')))
}
for (criteria in 1:1000) {
long <- rivers[rivers > criteria]
small <- rivers[rivers <= criteria]
}
long
small
for (criteria in 1:500) {
long <- rivers[rivers > criteria]
small <- rivers[rivers <= criteria]
}
long
small
for(i in 1:length(rivers)){ # rivers vectoriin huwid long river, short river eer ni ylgaj bichiw
ifelse(rivers[i]>500 ,
print(paste0('Observation:',i,'added tp long, because', river[i],'is higher than 500')),
print(paste0('Observation:',i,'added tp long, because', river[i],'is shorter than 500')))
}
if(rivers[i]>500){,
for(i in 1:length(rivers)){ # rivers vectoriin huwid long river, short river eer ni ylgaj bichiw
if(rivers[i]>500){
long = c(long,rivers[i])
print(paste0('Observation:',i,'added tp long, because', river[i],'is higher than 500'))
} else {
short = c(short, rivers[i])
print(paste0('Observation:',i,'added tp long, because', river[i],'is shorter than 500'))}
}
if(rivers[i]>500){
long = c(long,rivers[i])
print(paste0('Observation:',i,'added tp long, because', river[i],'is higher than 500'))
} else {
short = c(short, rivers[i])
print(paste0('Observation:',i,'added tp long, because', river[i],'is shorter than 500'))}
for(i in 1:length(rivers)){ # rivers vectoriin huwid long river, short river eer ni ylgaj bichiw
if(rivers[i]>500){
long = c(long,rivers[i])
print(paste0('Observation:',i,'added tp long, because', river[i],'is higher than 500'))
} else {
short = c(short, rivers[i])
print(paste0('Observation:',i,'added tp long, because', river[i],'is shorter than 500'))}
}
short <- NULL
long <- NULL
for (i in 1:length(rivers)) {
if (rivers[i] > 500) {
long <- c(long, rivers[i])
print(paste0("Observation: ", i, " added to long, because ", rivers[i], " is higher than 500"))
} else {
short <- c(short, rivers[i])
print(paste0("Observation: ", i, " added to short, because ", rivers[i], " is shorter than 500"))
}
}
p = 89
q = 56
TR = function(p,q){
ifelse(q>25,p*q,p*q*.1)
}
TR = function(p,q){
ifelse(q<25,p*q,p*q*.1)
}
TR(56,89)
source('~/GitHub/My project/Project4.R', echo=TRUE)
source('~/GitHub/My project/Project4.R', echo=TRUE)
source('~/GitHub/My project/Project4.R', echo=TRUE)
install.packages("dplyr")
source('~/GitHub/My project/Project4.R', echo=TRUE)
install.packages("dplyr")
install.packages("dplyr")
source('~/GitHub/My project/Project4.R', echo=TRUE)
rm(list=ls())
rm(list=ls())
# 1.Data and packages -----------------------------------------------------
library(quantmod)
library(dygraphs)
library(tseries)
library(tidyverse)
getSymbols(Symbols = "DELL",from='2016-08-17',auto.assign = T)
tail(DELL)
str(DELL)
chartSeries(DELL, TA=NULL)
barChart(DELL)
P<-DELL$DELL.Close
ra <- (P-lag(P))/lag(P)
diff(P)
rb = diff(P) - ra
rb
diff(P) - ra
head(diff(P))
head(ra)
(P-lag(P))
diff(P) - (P-lag(P))
table(diff(P) - (P-lag(P)))
table(diff(P)/lag(P) - ra)
ra = diff(P)/lag(P)
r = diff(P)/lag(P)
rm(list=ls())
# 1.Data and packages -----------------------------------------------------
library(quantmod)
library(dygraphs)
library(tseries)
library(tidyverse)
getSymbols(Symbols = "DELL",from='2016-08-17',auto.assign = T)
# 2. Graphics -------------------------------------------------------------
P = DELL$DELL.Close
r = diff(P)/lag(P)
P = DELL$DELL.Close
r = diff(P)/lag(P)
head(r)
typeof(r)
r = na.omit(r)
r
head(r)
install.packages("rugarch")
library(rugarch)
ugarchspec()
ugarchspec(r)
r = as.data.frame(diff(P)/lag(P))
r
is.data.frame(r)
r = na.omit(r)
head(r)
head(r$DELL.Close)
ugarchspec(r)
r = na.omit(r)
ugarchspec(r)
head(r)
r = as.data.frame(diff(P)/lag(P))
r = na.omit(r)
ugarchspec(r)
library(forecast)
auto.arima(r)
model_arima = auto.arima(r)
summary(model_arima)
Acf(model_arima)
model_arima = auto.arima(r)
Acf(model_arima)
model_arima = auto.arima(r)
model_arima
is.ts(r)
is.xts(r)
P = DELL$DELL.Close
r = diff(P)/lag(P)
r = na.omit(r)
is.ts(r)
is.xts(r)
model_arima = auto.arima(r)
summary(model_arima)
Acf(model_arima)
Acf(model_arima$fitted)
checkresiduals(model_arima)
P = DELL$DELL.Close
r = diff(P)/lag(P)
r = na.omit(r)
model_arima = auto.arima(r)
summary(model_arima)
checkresiduals(model_arima)
model_arima = auto.arima(r)
model_arima = auto.arima(r,stepwise = T)
summary(model_arima)
checkresiduals(model_arima)
model_arima = autoarfima(r,stepwise = T)
summary(model_arima)
model_arima = autoarfima(r)
summary(model_arima)
model_arima = arima(r,order = c(1,0,6))
summary(model_arima)
checkresiduals(model_arima)
acf(model_arima)
acf(model_arima$residuals)
pacg(model_arima$residuals)
pacf(model_arima$residuals)
garch(r)
model_garch = garch(r)
summaey(model_garch)
summary(model_garch)
ugarchspec(r)
model_uga = ugarchspec(r)
summary(model_uga)
model_uga
model2 = ugarchspec(mean.model = list(armaOrder=c(1,6)))
model2
fit = ugarchfit(model2,data=r)
fit
names(fit)
names(fit$model)
fit = ugarchfit(model2,data=r)
names(fit$model)
fit@fit
fit@fit
fit@fit$sigma
fit@fit$sigma
model2 = ugarchspec(mean.model = list(armaOrder=c(1,6)))
fit = ugarchfit(model2,data=r)
names(fit$model)
names(fit@fit)
fit@fit$residuals
fit@fit$var
head(fit@fit$var)
model_arima = arima(r,order = c(1,0,6))
summary(model_arima)
model_arima = arima(r,order = c(1,0,6))
summary(model_arima)
model_arima = arima(r,order = c(1,0,6))
summary(model_arima)
checkresiduals(model_arima)
model_arima = arima(r,order = c(1,0,2))
summary(model_arima)
checkresiduals(model_arima)
auto.arima(r)
model = auto.arima(r)
checkresiduals(model)
model = auto.arima(r)
summary(model)
checkresiduals(model_arima)
summary(model_arima)
model_arima$coef
model_arima = arima(r,order = c(1,0,6))
summary(model_arima)
model_arima$var.coef
model_arima$residuals
model2 = ugarchspec(mean.model = list(armaOrder=c(1,6)))
fit = ugarchfit(model2,data=r)
fit
names(fit@fit)
fit@fit$fitted.values
time(r)
fit@fit$sigma
fit@fit$sigma
ucmean(fit@fit)
library(quantmod)
library(dygraphs)
library(tseries)
library(tidyverse)
library(forecast)
library(rugarch)
ucmean(fit@fit)
ucmean(fit)
uncmean(fit)
uncmean(fit@fit)
uncmean(fit)
plot(fit)
plot(fit)
show(fit)
spec <- ugarchspec(variance.model = list(model = 'sGARCH',
garchOrder = c(1,1)),
mean.model = list(armaOrder=c(1,0),
include.mean = F),
distribution="norm")
fit <- ugarchfit(spec = spec, data = r)
show(fit)
spec <- ugarchspec(variance.model = list(model = 'sGARCH',
garchOrder = c(1,1)),
mean.model = list(armaOrder=c(1,6),
include.mean = F),
distribution="norm")
fit <- ugarchfit(spec = spec, data = r)
show(fit)
?ugarchspec
spec <- ugarchspec(variance.model = list(model = 'sGARCH',
garchOrder = c(1,1)),
mean.model = list(armaOrder=c(1,6),arfima=1,
include.mean = F),
distribution="norm")
fit <- ugarchfit(spec = spec, data = r)
show(fit)
spec <- ugarchspec(variance.model = list(model = 'sGARCH',
garchOrder = c(1,1)),
mean.model = list(armaOrder=c(1,0),arfima=1,
include.mean = F),
distribution="norm")
fit <- ugarchfit(spec = spec, data = r)
show(fit)
auto.arima(r)
spec <- ugarchspec(variance.model = list(model = 'sGARCH',
garchOrder = c(1,1)),
mean.model = list(armaOrder=c(1,0),arfima=T,
include.mean = F),
distribution="norm")
fit <- ugarchfit(spec = spec, data = r)
show(fit)
fit@model$fmodel
fit@model$modeldesc
fit@model$fixed.pars
fit@model$fmodel
fit@model$modeldesc$vmodel
fit@model$pidx
fit@model$modeldata
fit@model$start.pars
fit@fit$var
fit@fit$fitted.values
fit@fit$fitted.values
head(fit@fit$fitted.values,10)
autoarfima(r)
autoarfima(r)
r
autoarfima(data=r)
spec <- ugarchspec(variance.model = list(model = 'sGARCH',
garchOrder = c(1,1)),
mean.model = list(armaOrder=c(1,0),arfima=T,
include.mean = F),
distribution="norm")
spec2 <- ugarchspec(variance.model = list(model = 'sGARCH',
garchOrder = c(1,1)),
mean.model = list(armaOrder=c(1,0),
include.mean = F),
distribution="norm")
fit2 = ugarchfit(spec2,data=dr)
dr = diff(r)
dr = na.remove(dr)
spec2 <- ugarchspec(variance.model = list(model = 'sGARCH',
garchOrder = c(1,1)),
mean.model = list(armaOrder=c(1,0),
include.mean = F),
distribution="norm")
fit <- ugarchfit(spec = spec, data = r)
fit2 = ugarchfit(spec2,data=dr)
fit@fit$coef
fit2@fit$coef
head(fit@fit$sigma,10)
head(fit@fit$sigma^2,10)
fit@fit$coef
spec2 <- ugarchspec(variance.model = list(model = 'sGARCH',
garchOrder = c(1,1)),
mean.model = list(armaOrder=c(1,0,),
include.mean = F,
fixed.pars =list(fi=1)),
distribution="norm")
spec2 <- ugarchspec(variance.model = list(model = 'sGARCH',
garchOrder = c(1,1)),
mean.model = list(armaOrder=c(1,0),
include.mean = F,
fixed.pars =list(fi=1)),
distribution="norm")
fit2 = ugarchfit(spec2,data=dr)
fit2@fit$coef
fit@fit$coef
spec <- ugarchspec(variance.model = list(model = 'sGARCH',
garchOrder = c(1,1)),
mean.model = list(armaOrder=c(1,0),arfima=T,
include.mean = F),
distribution="norm")
fit <- ugarchfit(spec = spec, data = r)
fit@fit$coef
fit@fit$sigma
head(fit@fit$sigma)
head(fit@fit$fitted.values)
plot(fit)
VaRTest(fit)
VaRTest(fit,r)
?VaRTest
VaRTest(.05,r,fit)
VaR = mu + qnorm(.05)*sigma
mu = fit@fit$fitted.values
sigma = fit@fit$sigma
VaR = mu + qnorm(.05)*sigma
VaR
VaRTest(.05,r,VaR)
VaRplot(.05,r,VaR)
VaRTest(.05,r,VaR)
test = VaRTest(.05,r,VaR)
test$expected.exceed
test$actual.exceed
GARCH_VaR = as.numeric(mu + sigma*qnorm(.05))
test = VaRTest(.05,r,GARCH_VaR)
test
names(test)
VaRplot(.05,r,GARCH_VaR)
VaRplot(.05,r,c(GARCH_VaR,uncvariance(fit)))
VaRplot(.05,r,GARCH_VaR)
VaRplot(.05,r,GARCH_VaR,ylab = "Returns", main = "95% VaR Forecasting", xaxt = "n")
VaRplot(.05,r,GARCH_VaR,ylab = "Returns",
main = "95% VaR Forecasting")
fit@fit$coef
fit@fit$coef[['shape']]
test = VaRTest(.05,r,GARCH_VaR)
names(test)
test$actual.exceed
test$actual.exceed/length(r)
test$actual.exceed/length(r)
dawsan_tseg = test$actual.exceed/length(r)
(dawsan_tseg = test$actual.exceed/length(r))
VaRStatic <- sd(r) * qnorm(0.05)
# ewma
spec2 = ugarchspec(variance.model=list(model="iGARCH",
garchOrder=c(1,1)),
mean.model=list(armaOrder=c(1,0),
include.mean=F),
distribution.model="norm",
fixed.pars=list(omega=0))
ewma_fit = ugarchfit(spec = spec2, data = r)
ewma_fit@fit$coef
EWMA_VaR = ewma_fit@fit$fitted.values + qnorm(.05)*ewma_fit@sigma
EWMA_VaR = ewma_fit@fit$fitted.values + qnorm(.05)*ewma_fit@fit$sigma
VaRplot(.05,r,EWMA_VaR,ylab = "Returns",
main = "95% VaR Forecasting")
VaRplot(.05,r,EWMA_VaR,ylab = "Returns")
Box.test(r,type = 'Box-Pierce')
model_arima = auto.arima(r)
summary(model_arima)
tsdisplay(r)
tsdisplay(model_arima$residuals)
checkresiduals(model_arima)
head(sigma(fit))
head(fitted(fit))
mu = sigma(fit)
mu = fitted(fit)
sigma = sigma(fit)
plot(fit)
GARCH_VaR = mu + qnorm(.05)*sigma
GARCH_VaR
names(test)
(dawsan_tseg = test$actual.exceed/length(r))
test$actual.exceed/length(r)
plot(fit)
test = VaRTest(.05,r,GARCH_VaR)
names(test)
test$actual.exceed/length(r)
VaRplot(.05,r,GARCH_VaR,ylab = "Returns",
main = "95% VaR Forecasting")
VaRplot(.05,r,GARCH_VaR,ylab = "Returns",
title = "95% VaR Forecasting")
VaRplot(.05,r,GARCH_VaR,ylab = "Returns",title = 'PLot')
VaRplot(.05,r,GARCH_VaR)
VaRStatic <- sd(r) * qnorm(0.05)
# ewma
spec2 = ugarchspec(variance.model=list(model="iGARCH",
garchOrder=c(1,1)),
mean.model=list(armaOrder=c(1,0),
include.mean=F),
distribution.model="norm",
fixed.pars=list(omega=0))
ewma_fit = ugarchfit(spec = spec2, data = r)
ewma_fit@fit$coef
EWMA_VaR = ewma_fit@fit$fitted.values + qnorm(.05)*ewma_fit@fit$sigma
EWMA_VaR = fitted(ewma_fit) + qnorm(.05)*sigma(ewma_fit)
VaRplot(.05,r,EWMA_VaR,ylab = "Returns")
VaRs = cbind(VaRStatic,GARCH_VaR,EWMA_VaR)
head(VaRs)
plot(VaRs)
VaRs = cbind(r,VaRStatic,GARCH_VaR,EWMA_VaR)
head(VaRs)
plot(VaRs)
gather(VaRs)
as.data.frame(VaRs)
vars_df = as.data.frame(VaRs)
vars_df = as.data.frame(VaRs,row.names = F)
head(vars_df)
vars_df = as.data.frame(VaRs,time = time(VaRs),row.names = F)
head(vars_df)
vars_df = as.data.frame(VaRs,row.names = F)
vars_df = vars_df %>% mutate(Date = time(VaRs))
head(vars_df)
vars_gather = gather(Vars,"series",'value'-Date)
vars_gather = gather(vars_df,"series",'value'-Date)
vars_gather = gather(vars_df,series,value-Date)
vars_gather = gather(vars_df,key = series,value = value,-Date)
head(vars_gather)
library(dygraphs)
dygraph(vars_gather)
dygraph(vars_gather,x=series,y=value)
vars_gather
VaRs
VaRs %>% gather(key=series,value=value)
vars_df = as.data.frame(VaRs,row.names = F)
vars_df = vars_df %>% mutate(Date = time(VaRs))
head(vars_df)
vars_gather = gather(vars_df,key = series,value = value,-Date)
head(vars_gather)
plotly::plot_ly(vars_gather)
plotly::plot_ly(vars_gather,type = line)
dygraph(vars_gather)
dygraph(vars_gather$series)
dygraph(VaRs)
r = na.omit(r)
head(r)
names(r)
names(r)=return
names(r)="return"
r
head(r)
dygraph(VaRs,main = 'Return and VaRs')
dygraph(VaRs,main = 'Return and VaRs',
xlab ='Date',ylab = "Rate" )
source('~/GitHub/Youtube-channel/UFE/GARCH_VaR/GARCH_VaR.R', echo=TRUE)
source('~/GitHub/Youtube-channel/UFE/GARCH_VaR/GARCH_VaR.R', echo=TRUE)
dygraph(VaRs,main = 'Dell Return and VaRs',
xlab ='Date',ylab = "Rate" )
dygraph(VaRs,main = 'Dell return and VaRs',
xlab ='Date',ylab = "Rate" )
candleChart(r)
candleChart(DELL)
graph<-dygraph(OHLC(DELL))
dyCandlestick(graph)
plot(VaRs)
plot(fit)
test = VaRTest(.05,r,GARCH_VaR)
names(test)
test$actual.exceed/length(r)
coef(ewma_fit)
VaRplot(.05,r,EWMA_VaR,ylab = "Returns")
knitr::opts_chunk$set(echo = TRUE,message = F,warning = F)
plot(fit) #
